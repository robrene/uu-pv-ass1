imports
{
}

attr Programs Program
  syn wlps use {++} {[]}:: {[Expression]}

attr Program
  syn postQ :: {Expression}
  syn wlp   :: {Expression}

sem Program
  | Program loc.postQ = @postcond.copy
            loc.wlp = mkProgramWlp @precond.copy @params.copyL (@code.wlp, @code.verifs)
            loc.wlps = [@wlp]

{
conjunct :: Expression -> Expression -> Expression
conjunct x y    = ExpOp x OpConjunct y
(∧) = conjunct

imply :: Expression -> Expression -> Expression
imply x y       = ExpOp x OpImply y
(⇒) = imply

mkProgramWlp :: Expression -> Variables -> (Expression, [Expression]) -> Expression
mkProgramWlp precond params (wlpCode, wlpVerifs) = foldr conjunct quantifiedWlp quantifiedExprs
  where rv              = Variable "$RV" (PrimitiveTy PTyInt)
        quantify e      = chainForalls (rv:params) e
        quantifiedExprs = map quantify wlpVerifs
        quantifiedWlp   = quantify (imply precond wlpCode)

chainForalls :: Variables -> Expression -> Expression
chainForalls []     = id
chainForalls (v:vs) = Forall (asBoundVariable v) . chainForalls vs

asBoundVariable :: Variable -> BoundVariable
asBoundVariable (Variable name ty) = BoundVariable name ty
}

attr Statement
  inh postQ       :: {Expression}
  syn wlp         :: {Expression}
  syn verifs      :: {[Expression]}
  syn hasReturned :: {Bool}

sem Statement
  | *          loc.verifs = []
               loc.hasReturned = False

  -- wlp skip Q = Q
  | Skip       loc.wlp = @lhs.postQ

  -- wlp (assert P) Q = P ∧ Q
  | Assert     loc.wlp = @exp.copy ∧ @lhs.postQ

  -- wlp (assume P) Q = P => Q
  | Assume     loc.wlp = @exp.copy `imply` @lhs.postQ

  -- wlp (x := e) Q = Q[e/x]
  -- wlp (a[i] := e) Q = Q[a(i repby e)/a]
  | Assignment loc.wlp = subst @exp.copy @tar.copy @lhs.postQ

  -- wlp (return _) Q = Q, and mark the fact for control flow.
  | Return     loc.wlp = subst @exp.copy (Target "$RV") @lhs.postQ
               lhs.hasReturned = True

  -- wlp (s1 ; s2) Q = wlp s1 (wlp s2 Q)
  -- Unless s1 is a return statement: wlp (return _ ; s2) Q = Q
  | Seq        s1.postQ = if @s1.hasReturned then @lhs.postQ else @s2.wlp
               loc.wlp  = @s1.wlp
               lhs.verifs = @s1.verifs ++ @s2.verifs

  -- wlp (s1 [] s2) Q = wlp s1 Q ∧ wlp s2 Q
  | Square     loc.wlp = @s1.wlp ∧ @s2.wlp
               lhs.verifs = @s1.verifs ++ @s2.verifs

  --                            { I,         provided I ∧ not g => Q
  -- wlp (inv I while g do S) = {            and I ∧ g => wlp S I
  --                            { not g ∧ Q, otherwise
  -- We choose the first alternative. We pass the additional requirements in an
  -- additional attribute to be checked by the theorem checker at a later point.
  | While      body.postQ  = @inv.copy  -- @body.wlp <- wlp S I
               loc.reqs_ng = (@inv.copy ∧ Not @cond.copy) `imply` @lhs.postQ  -- I ∧ not g => Q
               loc.reqs_g  = (@inv.copy ∧ @cond.copy) `imply` @body.wlp         -- I ∧ g => wlp S I
               lhs.verifs  = @reqs_ng ∧ @reqs_g : @verifs
               loc.wlp     = @inv.copy

  -- wlp (var x in S end) Q = (forall x :: wlp S Q)
  | Var        loc.wlp = chainForalls @vars.copyL @body.wlp

{
-- subst e t Q      ~= "substitute occurrences of t in Q with e"
-- subst e "x" Q    ~= Q[e/x]
-- subst e "a[i]" Q ~= Q[a(i repby e)/a]
subst :: Expression -> AsgTarget -> Expression -> Expression
subst e t q = smartSubst [] e t q

-- Like subst, but with an ignore list.
smartSubst :: [Name] -> Expression -> AsgTarget -> Expression -> Expression
-- Actual substitutions:
smartSubst ls e (Target x) r@(Ref n)
  | x == n && x `notElem` ls = e
  | otherwise                = r

smartSubst ls e t@(TargetArr a i) arr@(ArrAccess a' i')
  | a == a' && a `notElem` ls = IfThenElse (ExpOp i' OpEquals i) e arr
  | otherwise                 = ArrAccess a' $ smartSubst ls e t i'

-- Recursion into substructures:
smartSubst ls e t (ExpOp e1 op e2)     = ExpOp e1' op e2'
  where e1' = smartSubst ls e t e1
        e2' = smartSubst ls e t e2
smartSubst ls e t (Not e1)             = Not $ smartSubst ls e t e1
smartSubst ls e t (Func n ps)          = Func n $ map (smartSubst ls e t) ps
smartSubst ls e t (Forall bv@(BoundVariable bvn _) e1)
                                       = Forall bv $ smartSubst (bvn:ls) e t e1
smartSubst ls e t (IfThenElse c e1 e2) = IfThenElse c' e1' e2'
  where c'  = smartSubst ls e t c
        e1' = smartSubst ls e t e1
        e2' = smartSubst ls e t e2
smartSubst ls _ _ q                    = q
}
