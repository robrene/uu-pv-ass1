imports
{
import CCO.SourcePos
}

{
type Name = String
}

data Program
  | Program  name :: {Name}  params :: Parameters  code :: Statement

data Statement
  | Skip
  | Assert  exp :: Expression
  | Assume  exp :: Expression
  | Assignment  tars :: AsgTargets  exps :: Expressions
  | Return  exp :: Expression
  | Seq  s1 :: Statement  s2 :: Statement
  | Square  s1 :: Statement  s2 :: Statement
  | While  inv :: Expression  cond :: Expression  body :: Statement
  | Var  vars :: Variables  body :: Statement

type Parameters = [Variable]

type Variables = [Variable]

data Variable
  | Credentialized  cred :: {Integer}  name :: {Name}  ty :: Type
  | Variable  name :: {Name}  ty :: Type

data BoundVariable
  | BoundVariable  name :: {Name}  ty :: Type

type AsgTargets = [AsgTarget]

data AsgTarget
  | Target  name :: {Name}
  | TargetExp  name :: {Name}  exp :: Expression

type Expressions = [Expression]

data Expression
  | BoolLiteral  val :: {Bool}
  | IntLiteral  val :: {Int}
  | Name  name :: {Name}
  | ExpOp  exp1 :: Expression  op :: {BinaryOp}  exp2 :: Expression
  | Not  exp :: Expression
  | UnFunc  name :: {Name}  exps :: Expressions
  | Forall  bvar :: BoundVariable  exp :: Expression
  | NamedExp  name :: {Name}  exp :: Expression
  | IfThenElse  cond :: Expression  exp1 :: Expression  exp2 :: Expression

{
data BinaryOp = OpPlus
              | OpMinus
              | OpTimes
              | OpDiv
              | OpOr
              | OpAnd
              | OpConjunct
              | OpDisjunct
              | OpImply
              | OpLT
              | OpLTE
              | OpGT
              | OpGTE
              | OpEquals
}

data Type
  | PrimitiveTy  pty :: {PrimitiveType}
  | ArrayTy  aty :: ArrayType

{
data PrimitiveType = PTyInt
                   | PTyBool
}

data ArrayType
  | Array  ty :: {PrimitiveType}
